<template>
    <div id="index-work" class="page">
        <div class="navbar">
            <div class="navbar-inner">
                <div id="title-work" class="title">Mes prestations</div>
                <div class="right">
                    <a class="link icon-only panel-open ripple-inset" data-panel="right">
                        <i class="icon material-icons md-only">menu</i>
                        <i class="icon f7-icons if-not-md">menu</i>
                    </a>
                </div>
            </div>
        </div>
        <div class="page-content">
            <div class="block-title">
                <div class="col-6 display-flex justify-content-center">
                    <span>Informations sur les prestations</span>
                    <span>
                        <a href="/form-work/">
                            <i class="f7-icons">new plus_app_fill</i>
                        </a>
                    </span>
                </div>
            </div>
            ${worksByUser.map((item) => $h`
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">${item.name}</h3>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><strong>Lieu :</strong> ${item.city}</p>
                        <p class="card-text"><strong>Date de début :</strong> ${formatDate(item.start)}</p>
                        <p class="card-text"><strong>Date de fin :</strong> ${formatDate(item.end)}</p>
                        <p class="card-text"><strong>État :</strong> ${item.progression}</p>
                        <p class="card-text"><strong>Équipements :</strong> ${getEquipementsInLine(item.equipements)}</p>
                        <p class="card-text"><strong>Client :</strong> ${item.client.name}</p>
                        <div class="total-section">
                            <p class="card-text"><strong>Total hors taxes :</strong> ${item.totalAmount.toFixed(2)} €</p>
                            <p class="card-text"><strong>TVA :</strong> ${tvaOnAmount(item.totalAmount, tvaEnum.TVA_MAINTENANCE_WORK).toFixed(2)} €</p>
                            <p class="card-text final-total"><strong>Total TTC :</strong> ${totalAmountTVA(item.totalAmount, tvaEnum.TVA_MAINTENANCE_WORK).toFixed(2)} €</p>
                        </div>
                    </div>
                    <div class="card-footer d-flex justify-content-end">
                        <a href="/prestation/${idPrestation(item)}" class="card-link" aria-label="Voir les détails de la prestation">
                            <i class="f7-icons">eye_fill</i>
                        </a>
                    </div>
                </div>
            `)}
        </div>
    </div>
</template>
<script>
    import Framework7 from 'framework7/bundle'

    import { formatDate } from '../../js/date.js'
    import { getWorkByUser, getEquipementsInLine } from '../../js/work.js'
    import { sendNotificationPushForProgression } from '../../js/notification'
    import { loadTabbar } from '../../js/components/tabbar.js'
    import { totalAmountTVA, tvaOnAmount } from '../../js/helper/priceWorkHelper'
    import { tvaEnum } from '../../js//enum/tvaEnum.js'

    export default async (props, { $, $on, $f7 }) => {
        const works = await getWorkByUser($f7)
        const worksByUser = works.reverse()

        const idPrestation = (prestation) => prestation.hasOwnProperty('@id') ? prestation['@id'].split('/').pop() : prestation.id

        $on('pageInit', function (page) {
            loadTabbar('index-work', $f7);
        })

        setTimeout(() => {
            sendNotificationPushForProgression($f7)
        // }, 10000)
        }, 60000)

        return $render
    }
</script>