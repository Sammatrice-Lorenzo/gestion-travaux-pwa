<template>
  <div id="index-work" class="page">
    <div class="navbar">
      <div class="navbar-inner">
        <div id="title-work" class="title">Mes prestations</div>
        <div class="right">
          <a class="link icon-only panel-open ripple-inset" data-panel="right">
            <i class="icon material-icons md-only">menu</i>
            <i class="icon f7-icons if-not-md">menu</i>
          </a>
        </div>
      </div>
    </div>
      <div class="page-content">
        <div class="block-title display-flex justify-content-space-between align-items-center">
          <span class="text-lg font-bold">Informations sur les prestations</span>
          <a href="/form-work/" class="button-small button-outline">
            <span class="ml-5">Ajouter</span>
            <i class="icon f7-icons">plus_app_fill</i>
          </a>
        </div>
        ${worksByUser.map((work) => $h`
        <div class="card card-work mb-3">
          <div class="card-header flex justify-between items-center">
            <h5 class="card-title m-0">${work.name}</h5>
            <span class="badge badge-status ${getProgressColor(work.progression)}">${work.progression}</span>
          </div>
          <div class="card-content card-content-padding">
            <ul class="data-list">
              <li><i class="f7-icons icon-left">placemark</i><strong>Lieu :</strong> ${work.city}</li>
              <li><i class="f7-icons icon-left">calendar_circle</i><strong>Début :</strong> ${formatDate(work.start)}</li>
              <li><i class="f7-icons icon-left">calendar_circle</i><strong>Fin :</strong> ${formatDate(work.end)}</li>
              <li><i class="f7-icons icon-left">hammer</i><strong>Équipements :</strong> ${getEquipementsInLine(work.equipements)}</li>
              <li><i class="f7-icons icon-left">person_circle</i><strong>Client :</strong> ${work.client.name}</li>
            </ul>
            <div class="total-section mt-2">
              <p>
                <strong>HT :</strong> ${work.totalAmount.toFixed(2)} €
              </p>
              <p>
                <strong>TVA :</strong> ${tvaOnAmount(work.totalAmount, tvaEnum.TVA_MAINTENANCE_WORK).toFixed(2)} €
              </p>
              <p class="final-total">
                <strong><i class="f7-icons icon-left">money_euro_circle</i>TTC :</strong> ${totalAmountTVA(work.totalAmount, tvaEnum.TVA_MAINTENANCE_WORK).toFixed(2)} €
              </p>
            </div>
          </div>
          <div class="card-footer d-flex justify-content-end">
            <a href="/prestation/${work.id}" class="button button-small">
              <i class="f7-icons">eye_fill</i>
              Détails
            </a>
          </div>
        </div>
        `)}
        <div class="pagination">
          <a href="#" class="btn-prev" @click="${previousElement}">
            <i class="f7-icons">chevron_left_circle_fill</i>
          </a>
          <span class="pagination-links"></span>
          <a href="#" class="btn-next" @click="${nextElement}">
            <i class="f7-icons">chevron_right_circle_fill</i>
          </a>
        </div>
    </div>
  </div>
</template>
<script>
  import Framework7 from 'framework7/bundle'

  import { formatDate } from '../../js/date.js'
  import { getProgressColor } from '../../js/helper/statusHelper.ts'
  import { getWorkByUser, getEquipementsInLine } from '../../js/work.js'
  import { sendNotificationPushForProgression } from '../../js/notification'
  import { loadTabbar } from '../../js/components/tabbar.js'
  import { totalAmountTVA, tvaOnAmount } from '../../js/helper/priceWorkHelper'
  import { tvaEnum } from '../../js/enum/tvaEnum.js'
  import Pagination from '../../js/service/Pagination.ts'

  export default async (props, { $, $on, $f7, $update }) => {
    const response = await getWorkByUser($f7, 1)
    let worksByUser = response.works.reverse()
    const pagination = new Pagination(response.totalItems, 10)

    const updateWorks = async () => {
      const response = await getWorkByUser($f7, pagination.currentPage)
      worksByUser = response.works.reverse()
      $update()
    }

    const nextElement = async () => {
      pagination.nextElement($('.btn-prev'), $('.btn-next'))
      await updateWorks()
    }
    const previousElement = async () => {
      pagination.previousElement($('.btn-prev'), $('.btn-next'))
      await updateWorks()
    }

    $on('pageInit', function (page) {
      loadTabbar('index-work', $f7)
      pagination.renderPageLinks(document.querySelector('.pagination-links'))
      pagination.updatePagination($('.btn-prev'), $('.btn-next'))
      pagination.handleActionButtonsWithNumber($('.btn-prev'), $('.btn-next'), updateWorks)
    })

    setTimeout(() => {
      sendNotificationPushForProgression($f7)
    }, 60000)

    return $render
  }
</script>