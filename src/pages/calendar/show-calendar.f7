<template>
    <div class="page">
        <div class="navbar no-shadow">
            <div class="navbar-bg"></div>
            <div class="navbar-inner sliding">
                <div class="left">
                    <a class="link back">
                        <i class="icon icon-back"></i>
                        <span class="if-not-md">Retour</span>
                    </a>
                </div>
                <div class="title navbar-calendar-title"></div>
            </div>
        </div>
        <div class="page-content">
            <div id="calendar" class="block block-strong no-padding no-margin no-hairline-top"></div>
            <div class="popup popup-swipe">
                <div class="page">
                    <div class="navbar">
                        <div class="navbar-bg"></div>
                        <div class="navbar-inner">
                            <div class="title title-popup">Créer un nouveau événement</div>
                            <div class="right">
                                <a class="link popup-close">
                                    <i class="f7-icons">xmark_circle</i>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="page-content">
                        <div class="display-flex justify-content-center align-items-center">
                            <form id="form-calendar">
                                <div class="block-title text-align-center">
                                    <p>Création prestation jour</p>
                                </div>
                                <div class="list list-strong-ios list-dividers-ios list-outline-ios no-hairlines-md">
                                    <ul>
                                        <li class="item-content item-input">
                                            <div class="item-inner">
                                                <div class="item-title item-label">Titre : </div>
                                                <div class="item-input-wrap">
                                                    <input name='title' type="text" placeholder="RDV chez le client" required validate/>
                                                </div>
                                            </div>
                                        </li>
                                        <li class="item-content item-input">
                                            <div class="item-inner">
                                                <div class="item-title item-label">Heure de début : </div>
                                                <div class="item-input-wrap">
                                                    <input name='startHour' type="time" value="08:00" required validate/>
                                                </div>
                                            </div>
                                        </li>
                                        <li class="item-content item-input">
                                            <div class="item-inner">
                                                <div class="item-title item-label">Heure de fin : </div>
                                                <div class="item-input-wrap">
                                                    <input name='endHour' type="time" value="18:00" required validate/>
                                                </div>
                                            </div>
                                        </li>
                                        <li class="item-content item-input">
                                            <div class="item-media">
                                                <i class="icon f7-icons" id="color-picker-spectrum-value">paintbrush_fill</i>
                                            </div>
                                            <div class="item-inner">
                                                <div class="item-title item-label">Couleur : </div>
                                                <div class="item-input-wrap">
                                                    <input name='color' type="text" placeholder="Couleur" 
                                                        readonly="readonly" id="color-picker-spectrum" required validate />
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                    <div class="block display-flex justify-content-center">
                                        <a href="#" class="button button-small button-round" @click="${send}">
                                            <i class="f7-icons">checkmark_circle</i>
                                        </a>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div id="calendar-events" class="list no-margin no-hairlines no-safe-area-left">
                <ul>
                    ${eventItems.length > 0 && eventItems.map((item) => $h`
                        <li class="item-content swipeout">
                            <div class="event-color" style="background-color: ${item.color}"></div>
                            <div class="item-inner swipeout-content" data-id="${item.id}">
                                <div class="item-title">${item.title}</div>
                                <div class="item-after">
                                    <p class="event-times">${item.startTime}</p>
                                    <p class="event-times">${item.endTime}</p>
                                </div>
                                <div id="${item.id}" class="id-work-event-day"></div>
                            </div>
                            <div class="swipeout-actions-right">
                                <a href="#" @click="${edit}">
                                    <i class="f7-icons">square_pencil</i>
                                </a>
                                <a class="swipeout-delete" @click="${removeEvent}">
                                    <i class="f7-icons">trash</i>
                                </a>
                            </div>
                        </li>
                    `)}
                    ${eventItems.length === 0 && $h`
                        <li class="item-content">
                            <div class="item-inner">
                                <div class="item-title text-color-gray">Pas d'événement ce jour</div>
                            </div>
                        </li>
                    `}
                    <a href="#" class="display-flex justify-content-center button-raised col popup-open" data-popup=".popup-swipe">
                        <i class="f7-icons">calendar_badge_plus</i>
                    </a>
                </ul>
            </div>
        </div>

    </div>
</template>
<script>
    import { monthsEnum } from '../../js/enum/monthEnum.js'
    import { renderEventsCalendar } from '../../js/service/calendar/renderCalendarService.js'
    import { createCalendar } from '../../js/service/calendar/createCalendarService.js'
    import {
        getWorkDayCalendar,
        getElementEdit,
        handleEditClassForm,
        getEventSelected ,
        getMaxId
    } from '../../js/service/calendar/calendarForm.js'
    import { createColorPickerForEventCalendar } from '../../js/service/calendar/colorPickerEventCalendar.js'
    import {
        getWorkEventDayByUser,
        createWorkEventDay,
        updateWorkEventDay,
        deleteWorkEventDay,
        isValidForm
    } from '../../js/workEventDay.js'
    import { getEventsFormatted } from '../../js/formatter/eventsFormatter.js'
    import Framework7DTO from '../../js/Framework7DTO.js'

    export default async (props, { $f7, $, $el, $update, $on, $onMounted }) => {
        const date = new Date()
        const year = date.getFullYear()
        const month = date.getMonth()
        const day = date.getDate()

        const selectorForm = '#form-calendar'

        const workEventDays = await getWorkEventDayByUser($f7)
        let events = getEventsFormatted(workEventDays)
        const framework7DTO = new Framework7DTO($f7, $el, $)

        let calendar
        let popupSwipe
        let colorPickerSpectrum
        let eventItems = []
        let indexOfEventToEdit

        const today = new Date(year, month, day)
  
        const renderEvents = (calendar) => {
            eventItems = renderEventsCalendar(calendar, events, eventItems)
            $update()
        }

        $on('pageInit', () => {
            calendar = createCalendar(framework7DTO, today, renderEvents, events)
            colorPickerSpectrum = createColorPickerForEventCalendar($f7)
        })

        const send = () => {
            if (!isValidForm(framework7DTO)) {
                return
            }

            let formData = $f7.form.convertToData(selectorForm)
            const dateSelected = $f7.calendar.get().value[0]

            const workEventDay = getWorkDayCalendar(formData, dateSelected)
            if ($(selectorForm).hasClass('edit')) {
                const id = events[indexOfEventToEdit].id
                workEventDay.id = id
                events[indexOfEventToEdit] = workEventDay
                updateWorkEventDay(workEventDay, id, $f7)
                $(selectorForm).removeClass('edit')
            } else {
                const futureId = getMaxId(events) + 1
                workEventDay.id = futureId
                events.push(workEventDay)
                createWorkEventDay(workEventDay, $f7)
            }

            calendar = createCalendar(framework7DTO, dateSelected, renderEvents, events)
            $update()
            popupSwipe.close()
        }

        const edit = (element) => {
            const idElement = parseInt(getElementEdit(element))
            const textUpdate = 'Modification événement'
            indexOfEventToEdit = events.findIndex(event => event.id === idElement)

            $(selectorForm).find('.block-title').children().text(textUpdate)
            $('.title-popup').text(textUpdate)

            const formCalendar = getEventSelected(idElement, eventItems, framework7DTO)
            colorPickerSpectrum = createColorPickerForEventCalendar($f7, formCalendar.color)

            popupSwipe.open()
        }

        const removeEvent = (element) => {
            const idElement = parseInt(getElementEdit(element))

            deleteWorkEventDay(idElement, $f7)
        }

        handleEditClassForm(framework7DTO)

        $onMounted(() => {
            popupSwipe = $f7.popup.create({
                el: '.popup-swipe',
                swipeToClose: true,
            })
        })
  
        return $render
    }
</script>